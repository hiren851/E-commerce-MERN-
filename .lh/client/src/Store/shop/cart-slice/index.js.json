{
    "sourceFile": "client/src/Store/shop/cart-slice/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740554873848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740800938787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n       {\r\n         userId,\r\n         productId,\r\n         quantity,\r\n+        \r\n       }\r\n     );\r\n     return response.data;\r\n   }\r\n"
                }
            ],
            "date": 1740554873848,
            "name": "Commit-0",
            "content": "import axios from \"axios\";\r\n\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  cartItems: [],\r\n  isLoading: false,\r\n};\r\n\r\nexport const addToCart = createAsyncThunk(\r\n  \"cart/addToCart\",\r\n  async ({ userId, productId, quantity }) => {\r\n    const response = await axios.post(\r\n      \"http://localhost:7000/api/shop/cart/add\",\r\n      {\r\n        userId,\r\n        productId,\r\n        quantity,\r\n      }\r\n    );\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const fetchCartItems = createAsyncThunk(\r\n  \"cart/fetchCartItems\",\r\n  async (userId) => {\r\n    // console.log(cartItems)\r\n    const response = await axios.get(\r\n      `http://localhost:7000/api/shop/cart/get/${userId}`\r\n    );\r\n\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const deleteCartItem = createAsyncThunk(\r\n  \"cart/deleteCartItem\",\r\n  async ({ userId, productId }) => {\r\n    const response = await axios.delete(\r\n      `http://localhost:7000/api/shop/cart/${userId}/${productId}`\r\n    );\r\n\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const updateCartQuantity = createAsyncThunk(\r\n  \"cart/updateCartQuantity\",\r\n  async ({ userId, productId, quantity }) => {\r\n    const response = await axios.put(\r\n      \"http://localhost:7000/api/shop/cart/update-cart\",\r\n      {\r\n        userId,\r\n        productId,\r\n        quantity,\r\n      }\r\n    );\r\n\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst shoppingCartSlice = createSlice({\r\n  name: \"shoppingCart\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(addToCart.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(addToCart.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.cartItems = action.payload.data;\r\n      })\r\n      .addCase(addToCart.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.cartItems = [];\r\n      })\r\n      .addCase(fetchCartItems.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(fetchCartItems.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.cartItems = action.payload.data;\r\n      })\r\n      .addCase(fetchCartItems.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.cartItems = [];\r\n      })\r\n      .addCase(updateCartQuantity.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(updateCartQuantity.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.cartItems = action.payload.data;\r\n      })\r\n      .addCase(updateCartQuantity.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.cartItems = [];\r\n      })\r\n      .addCase(deleteCartItem.pending, (state) => {\r\n        state.isLoading = true;\r\n      })\r\n      .addCase(deleteCartItem.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.cartItems = action.payload.data;\r\n      })\r\n      .addCase(deleteCartItem.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.cartItems = [];\r\n      });\r\n  },\r\n});\r\n\r\nexport default shoppingCartSlice.reducer;\r\n"
        }
    ]
}